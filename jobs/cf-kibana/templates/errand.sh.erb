#!/bin/bash

set -e
set -x

export PATH=/var/vcap/packages/cf-cli/bin:${PATH}
export CF_COLOR=false
export WORKDIR=/var/vcap/data/tmp

rm -rf $WORKDIR/kibana
mkdir -p $WORKDIR/kibana
cp -R /var/vcap/packages/cf-kibana/. $WORKDIR/kibana
cp /var/vcap/jobs/cf-kibana/config/manifest.yml $WORKDIR/kibana/manifest.yml
cp /var/vcap/jobs/cf-kibana/config/kibana.yml $WORKDIR/kibana/config/kibana.yml

<% p("cf-kibana.plugins").each do |plugin| name, path = plugin.first %>
  <% if path.start_with? '/var/vcap' %>
    $WORKDIR/kibana/bin/kibana-plugin install "file://<%= path %>"
  <% elsif path.start_with? 'http' %>
    $WORKDIR/kibana/bin/kibana-plugin install "<%= path %>"
  <% else %>
    $WORKDIR/kibana/bin/kibana-plugin install "<%= path %>"
  <% end %>
<% end %>

cd $WORKDIR/kibana

cf --version
<% if p("cloudfoundry.skip_ssl_validation") %>
cf api --skip-ssl-validation <%= p("cloudfoundry.api_endpoint") %>
<% else %>
cf api <%= p("cloudfoundry.api_endpoint") %>
<% end %>

set +x
cf auth <%= p("cloudfoundry.admin_user") %> <%= p("cloudfoundry.admin_password") %>
set -x
cf create-org <%= p("cf-kibana.cloudfoundry.system_org") %> || true
cf target -o <%= p("cf-kibana.cloudfoundry.system_org") %>
cf create-space <%= p("cf-kibana.cloudfoundry.logsearch_space") %> -o <%= p("cf-kibana.cloudfoundry.system_org") %> || true
cf target -o <%= p("cf-kibana.cloudfoundry.system_org") %> -s <%= p("cf-kibana.cloudfoundry.logsearch_space") %>
cf create-security-group logsearch-access /var/vcap/jobs/cf-kibana/config/allow-logsearch-access.json
cf bind-security-group logsearch-access <%= p("cf-kibana.cloudfoundry.system_org") %> <%= p("cf-kibana.cloudfoundry.logsearch_space") %>
cf bind-security-group <%= p("cf-kibana.cloudfoundry.api_security_group") %> <%= p("cf-kibana.cloudfoundry.system_org") %> <%= p("cf-kibana.cloudfoundry.logsearch_space") %>

<% if p("cf-kibana.oauth2_use_existing_client") == true %>
echo "Continiue with the existing UAA client: <%= p("cf-kibana.oauth2_client_id") %>"
<% else %>
set +x
# Create UAA client
ACCESS_TOKEN=$(\
curl -s -D - -k \
-u <%= p("cf-kibana.cloudfoundry.uaa_admin_client_id") %>:<%= p("cf-kibana.cloudfoundry.uaa_admin_client_secret") %> \
-H "Accept:application/json" \
-X POST 'https://uaa.<%= p("cf-kibana.cloudfoundry.system_domain") %>/oauth/token?grant_type=client_credentials&response_type=token&client_id=<%= p("cf-kibana.cloudfoundry.uaa_admin_client_id") %>&redirect_uri=http://dummy.com' \
| sed -n 's/.*access_token":"\([^"]*\).*/\1/p' \
)

CLIENT_EXISTS=$(\
curl -s -k -w "%{http_code}" -o /dev/null \
-H "Authorization:Bearer $ACCESS_TOKEN" \
-H"Content-Type:application/json" \
-H"Accept:application/json" \
-X GET https://uaa.<%= p("cf-kibana.cloudfoundry.system_domain") %>/oauth/clients/<%= p("cf-kibana.oauth2_client_id") %> \
)

if [ $CLIENT_EXISTS != "404" ]; then
   echo "Deleting old OAuth2 client: <%= p("cf-kibana.oauth2_client_id") %>"
   curl -s -k -w "%{http_code}" \
  -H "Authorization:Bearer $ACCESS_TOKEN" \
  -H"Content-Type:application/json" \
  -H"Accept:application/json" \
  -XDELETE \
  https://uaa.<%= p("cf-kibana.cloudfoundry.system_domain") %>/oauth/clients/<%= p("cf-kibana.oauth2_client_id") %>
fi

echo "Creating new OAuth2 client: <%= p("cf-kibana.oauth2_client_id") %>"
  curl -s -k -H "Authorization:Bearer $ACCESS_TOKEN" \
-H"Content-Type:application/json" \
-H"Accept:application/json" \
-d '{
  "client_id" : "<%= p("cf-kibana.oauth2_client_id") %>",
  "client_secret" : "<%= p("cf-kibana.oauth2_client_secret") %>",
  "scope" : ["openid","oauth.approvals","scim.userids","cloud_controller.read"],
  "authorities" : ["uaa.none"],
  "resource_ids" : ["none"],
  "authorized_grant_types" : ["authorization_code", "refresh_token"],
  "access_token_validity": 43200,
  "redirect_uri": ["https://<%= p("cf-kibana.app_name") %>.<%= p("cf-kibana.cloudfoundry.apps_domain") %>/login", "http://<%= p("cf-kibana.app_name") %>.<%= p("cf-kibana.cloudfoundry.apps_domain") %>/login"]
}' \
-X POST https://uaa.<%= p("cf-kibana.cloudfoundry.system_domain") %>/oauth/clients
<% end %>

cf push

EXITSTATUS=$?
echo "Errand Complete; exit status: $EXITSTATUS"
exit $EXITSTATUS
