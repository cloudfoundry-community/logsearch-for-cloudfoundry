# Parse Cloud Foundry logs from loggregator (syslog)
# see https://github.com/cloudfoundry/loggregator/blob/master/src/loggregator/sinks/syslogwriter/syslog_writer.go#L156

if [@type] in ["syslog", "relp"] and [syslog_program] == "doppler" {
  # Parse Cloud Foundry logs from doppler (via https://github.com/SpringerPE/firehose-to-syslog)
  
  json {
      source => 'syslog_message'
      add_tag => [ 'cloudfoundry_doppler' ] #This is only added if json parsing is successful
  }
  
  if "_jsonparsefailure" in [tags] {
      
      # Amend the failure tag to match our fail/${addon}/${filter}/${detail} standard 
      mutate {
          add_tag => ["fail/cloudfoundry/doppler/jsonparsefailure_of_syslog_message"]
          remove_tag => ["_jsonparsefailure"]
      }
  
  } else {
  
      date {
          match => [ "time", "ISO8601" ]
      }
  
      if ('RTR' in [source_type]) {
          grok {
              match => {
                  'msg' => '%{HOSTNAME:hostname} - \[(?<time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:verb} %{URIPATHPARAM:path} %{PROG:http_spec}\" %{BASE10NUM:status:int} %{BASE10NUM:body_bytes_sent:int} \"%{GREEDYDATA:referer}\" \"%{GREEDYDATA:http_user_agent}\" %{HOSTPORT} x_forwarded_for:\"%{GREEDYDATA:x_forwarded_for}\" vcap_request_id:%{NOTSPACE:vcap_request_id} response_time:%{NUMBER:response_time:float} app_id:%{NOTSPACE}'
                  overwrite => [ "time" ]
                  'tag_on_failure' => [ 'fail/cloudfoundry/doppler/RTR' ]
              }
          }
  
          if !("fail/cloudfoundry/doppler/RTR" in [tags]) {
              date {
                  match => [ "time", "dd/MM/y:HH:mm:ss Z" ]
              }
              if [x_forwarded_for] {
                  mutate {
                      gsub => ["x_forwarded_for","[\s\\"]",""] # remove quotes and whitespace
                      split => ["x_forwarded_for", ","] # format is client, proxy1, proxy2 ...
                  }
  
                 mutate {
                    add_field => ["remote_addr", "%{x_forwarded_for[0]}"]
                 }
                              
                 geoip {
                   source => "remote_addr"
                 }
              }
  
              mutate {
                  remove => [ "msg" ]
              }
          }
      }
  
      #Ensure that we always have an event_type, in prep for adding metrics
      if ![event_type] {
          mutate {
              add_field => [ "event_type", "LogMessage" ]
          }
      }
  
      mutate {
          remove_field => "@type"
      }
  
      mutate {
          add_field => [ "@type", "cloudfoundry_doppler" ]
          rename => [ "syslog_message", "@message" ]
          remove_field => "time"
          remove_field => "syslog_severity_code"
          remove_field => "syslog_facility_code"
          remove_field => "syslog_facility"
          remove_field => "syslog_severity"
          remove_field => "syslog_pri"
          remove_field => "syslog_program"
          remove_field => "syslog_pid"
      }
  }
  
  
      
} else if [@type] in ["syslog", "relp"] and [@source.host] == "loggregator" {
  # Parse Cloud Foundry logs from loggregator (syslog)
  # see https://github.com/cloudfoundry/loggregator/blob/master/src/loggregator/sinks/syslogwriter/syslog_writer.go#L156
  
  grok {
      match => { "syslog_procid" => "\[(?<log_source>[^/\]]+)(?:/(?<log_source_id>[^\]]+))?\]" }
      tag_on_failure => [
          "fail/logsearch-for-cloudfoundry/loggregator/_grokparsefailure"
      ]
  }
  
  if !("fail/logsearch-for-cloudfoundry/loggregator/_grokparsefailure" in [tags]) {
      #If it looks like JSON, it must be JSON...
      if [syslog_message] =~ /^\s*{".*}\s*$/ {
          json {
              source => "syslog_message"
          }
  
          # @todo seems like some messages have @timestamp in them? seems ci-specific
          date {
              match => [ "@timestamp", "ISO8601" ]
          }
      } else {
          mutate {
              add_field => [ "message", "%{syslog_message}" ]
          } 
          if [message] == "-" {
              mutate {
                  remove_field => "message"
              } 
          }
      }
  
      mutate {
          rename => [ "syslog_program", "@source.app_id" ]
      }
  
      mutate {
          add_tag => "cloudfoundry_loggregator"
          remove_field => "syslog_facility"
          remove_field => "syslog_facility_code"
          remove_field => "syslog_message"
          remove_field => "syslog_severity"
          remove_field => "syslog_severity_code"
          remove_field => "syslog5424_ver"
          remove_field => "syslog6587_msglen"
      }
  }

} else if [@type] in ["syslog", "relp"] and [syslog_program] =~ /vcap\..*/ {
  # Parse Cloud Foundry logs from syslog_aggregator
  
  grok {
      match => { "syslog_message" => "(?:\[job=%{NOTSPACE:@job.name}|-) +(?:index=%{NOTSPACE:@job.index}\]|-) %{GREEDYDATA:_message_json}" }
      tag_on_failure => [
          "_grokparsefailure-cf-vcap"
      ]
  }
  
  if !("_grokparsefailure-cf-vcap" in [tags]) {
      kv {
          source => "msgdata"
          field_split => " "
          target => "msgdata"
      }
  
      json {
          source => "_message_json"
          remove_field => "_message_json"
      }
  
      mutate {
          rename => [ "syslog_program", "@shipper.name" ]
          replace => [ "@job.host", "%{@source.host}" ]
          gsub => [
              "@shipper.name", "\.", "_",
              "@job.name", "\.", "_"
            ]
      }
  
      if [source] == "NatsStreamForwarder" {
          json {
              source => "[data][nats_message]"
              target => "nats_message"
          }
  
          mutate {
              remove_field => "[data][nats_message]"
          }
      }
  
      mutate {
          add_tag => "cloudfoundry_vcap"
          replace => [ "@shipper.priority", "%{syslog_pri}" ]
          replace => [ "@shipper.name", "%{@shipper.name}_%{@type}" ]
          replace => [ "@type", "%{@type}_cf" ]
      }
  
      mutate {
          remove_field => "syslog_facility"
          remove_field => "syslog_facility_code"
          remove_field => "syslog_message"
          remove_field => "syslog_severity"
          remove_field => "syslog_severity_code"
      }
  }

}
