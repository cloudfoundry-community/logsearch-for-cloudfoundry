# Parse Cloud Foundry logs from syslog_aggregator
if [@type] in ["syslog", "relp"] {
    if [@message] =~ /.*vcap.*/ {
        grok {
            match => { "@message" => "(?:%{INT:message_len} )?%{SYSLOG5424PRI}(?:%{NONNEGINT:syslog5424_ver} )?+(?:%{TIMESTAMP_ISO8601:@shipper.timestamp}|-) +(?:%{IPORHOST:@job.host}|-) +(?:%{NOTSPACE:@shipper.name}|-) +(?:\[job=%{NOTSPACE:@job.name}|-) +(?:index=%{NOTSPACE:@job.index}\]|-) +%{GREEDYDATA:message}" }
            add_tag => [ "cloudfoundry" ]
            tag_on_failure => ["_grokparsefailure-cloudfoundry"]
        }

        if !("_grokparsefailure-cloudfoundry" in [tags]) {
            date {
                match => [ "@shipper.timestamp", "ISO8601" ]
            }

            if [message] =~ /^\s*{".*}\s*$/ {
                mutate {
                    rename => [ "message", "_message_json" ]
                }

                json {
                    source => "_message_json"
                }

                mutate {
                    remove_field => [ "_message_json" ]
                }
            }

            mutate {
                replace => [ "@shipper.priority", "%{syslog5424_pri}" ]
                replace => [ "@shipper.name", "%{@shipper.name}_%{@type}" ]
                replace => [ "@type", "%{@type}_cf" ]
            }

            # Replace . with _
            mutate {
                gsub => [
                    "@shipper.name", "\.", "_",
                    "@job.name", "\.", "_"
                  ]
            }

            # Extract NatsStreamForwarder data
            if [source] == "NatsStreamForwarder" {
                json {
                    source => "[data][nats_message]"
                    target => "nats_message"
                }
            }

            # Remove temp fields
            mutate {
                remove_field => [ "syslog5424_pri" ]
            }

            mutate {
                convert => [ "syslog5424_ver", "integer" ]
                convert => [ "message_len", "integer" ]
            }
        }	
    }	
}
