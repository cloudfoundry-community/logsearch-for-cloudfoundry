##--------------------------
# App conf. Parses app logs.|
##--------------------------

if [@index_type] == "app" {

    mutate {
      add_tag => [ "app" ]
    }

    # Parse Cloud Foundry logs from doppler firehose
    # (for message format see https://github.com/cloudfoundry-community/firehose-to-syslog
    # and https://github.com/cloudfoundry/dropsonde-protocol/tree/master/events)
    json {
      source => "@message"
      target => "parsed_json_field"
    }

    if "_jsonparsefailure" in [tags] {

        # Amend the failure tag to match our fail/${addon}/${filter}/${detail} standard
        mutate {
            add_tag => ["fail/cloudfoundry/app/json"]
            remove_tag => ["_jsonparsefailure"]
        }

    } else {

        # Set @timestamp

        if [parsed_json_field][timestamp] or [parsed_json_field][start_timestamp] {

            # set @timestamp from event's timestamp if it is passed

            mutate {
              rename => { "[parsed_json_field][start_timestamp]" => "event_timestamp" } # HttpStartStop event case
              rename => { "[parsed_json_field][timestamp]" => "event_timestamp" }
            }
            ruby {
              # convert from nanosec-from-epoch number to Datetime
              init => "require 'time'"
              code => "time_in_nanosec_from_epoch = event['event_timestamp']
                       time_in_seconds = time_in_nanosec_from_epoch / 10 ** 9
                       milliseconds = time_in_nanosec_from_epoch % 10 ** 9 / 1000.to_f
                       event['event_timestamp'] = Time.at(time_in_seconds, milliseconds).iso8601(6)
                       "
            }
            date {
              match => [ "event_timestamp", "ISO8601" ]
              remove_field => [ "event_timestamp" ]
            }
        } else if [parsed_json_field][time] {

            # if event's timestamp is not passed then we set @timestamp = event shipping time from firehose-to-syslog

            date {
              match => [ "[parsed_json_field][time]", "ISO8601"]
            }
        }
        mutate {
          remove_field => [ "[parsed_json_field][time]" ]
        }


        # Set @message and @level

        # 1) Replace the unicode \u2028 with \n, which Kibana will display as a new line.
        # 2) Replace the unicode Null character \u0000 with ""
        mutate {
          gsub => [ "[parsed_json_field][msg]", '\u2028', "
" # Seems that passing a string with an actual newline in it is the only way to make gsub work.
          ]
          gsub => [ "[parsed_json_field][msg]", '\u0000', ""]
        }

        mutate {
          rename => { "[parsed_json_field][msg]" => "@message" } # @message
          rename => { "[parsed_json_field][level]" => "@level" } # @level
        }

        # Set @source fields
        mutate {
          rename => { "[parsed_json_field][ip]"          => "[@source][host]" }
          rename => { "[parsed_json_field][deployment]"  => "[@source][deployment]" }
          rename => { "[parsed_json_field][job]"         => "[@source][job]" }
          rename => { "[parsed_json_field][job_index]"   => "[@source][job_index]" }
          # override
          rename => { "[parsed_json_field][origin]"      => "[@source][component]" }
        }

        # Set @type (based on event_type)
        alter {
          coalesce => [ "@type", "%{[parsed_json_field][event_type]}", "UnknownEvent" ]
          remove_field => "[parsed_json_field][event_type]"
        }

        # Set [@source][type] (based on @type by default,
        # for LogMessage we override it with source_type field that comes in event's json)
        translate {
          field => "@type"
          dictionary => [ "LogMessage",       "LOG",
                          "Error",            "ERR",
                          "ContainerMetric",  "CONTAINER",
                          "ValueMetric",      "METRIC",
                          "CounterEvent",     "COUNT",
                          "HttpStartStop",    "HTTP"
          ]
          destination => "[@source][type]"
          override => true
          fallback => "NA"
        }

        # Set @cf fields
        mutate {
          rename => { "[parsed_json_field][cf_org_id]"     => "[@cf][org_id]" }
          rename => { "[parsed_json_field][cf_org_name]"   => "[@cf][org]" }
          rename => { "[parsed_json_field][cf_space_id]"   => "[@cf][space_id]" }
          rename => { "[parsed_json_field][cf_space_name]" => "[@cf][space]" }
          rename => { "[parsed_json_field][cf_app_id]"     => "[@cf][app_id]" }
          rename => { "[parsed_json_field][cf_app_name]"   => "[@cf][app]" }

          remove_field => "[parsed_json_field][cf_origin]"  # cf_origin = firehose all the time
          remove_field => "[parsed_json_field][cf_ignored_app]"  # cf_ignored_app = false all the time (https://github.com/cloudfoundry-community/firehose-to-syslog/issues/137)
        }

        # Define [parsed_json_field_name]
        mutate {
          add_field => { "parsed_json_field_name" => "%{@type}"}
        }

        # Override @metadata.index
        if [@cf][org] {
            mutate { replace => { "[@metadata][index]" => "%{[@metadata][index]}-%{[@cf][org]}" } }
            if [@cf][space] {
                mutate { replace => { "[@metadata][index]" => "%{[@metadata][index]}-%{[@cf][space]}" } }
            }
            mutate { lowercase => [ "[@metadata][index]" ] }
        }
    }

}
