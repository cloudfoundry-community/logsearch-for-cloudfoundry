# Parse Cloud Foundry logs from doppler firehose (via https://github.com/SpringerPE/firehose-to-syslog)
if [@type] in ["syslog", "relp"] and [syslog_program] == "doppler" {

  json {
    source => '@message'
  }

  if "_jsonparsefailure" in [tags] {

# Amend the failure tag to match our fail/${addon}/${filter}/${detail} standard
    mutate {
      add_tag => ["fail/cloudfoundry/firehose/jsonparsefailure_of_syslog_message"]
      remove_tag => ["_jsonparsefailure"]
    }

  } else {

    date {
      match => [ "time", "ISO8601" ]
    }

    if [event_type] == "ContainerMetric" {
      mutate {
        add_tag => "ContainerMetric"
        add_field => {"[@source][component]" => "METRIC"}
        add_field => {"[@source][instance]" => "%{[instance_index]}"}
      }

      mutate {
        rename => { "[cpu_percentage]" => "[container][cpu_percentage]" }
        rename => { "[memory_bytes]" => "[container][memory_bytes]" }
        rename => { "[disk_bytes]" => "[container][disk_bytes]" }
        remove => "[instance_index]"
      }
    }

    mutate {
      rename => { "[cf_app_id]" => "[@source][app][id]" }
      rename => { "[cf_app_name]" => "[@source][app][name]" }
      rename => { "[cf_space_id]" => "[@source][space][id]" }
      rename => { "[cf_space_name]" => "[@source][space][name]" }
      rename => { "[cf_org_id]" => "[@source][org][id]" }
      rename => { "[cf_org_name]" => "[@source][org][name]" }

      rename => { "[level]" => "[@level]" }
      uppercase => [ "[@level]" ]

      rename => { "[host]" => "[@source][host]" }
      rename => { "[source_type]" => "[@source][component]" }
      rename => { "[source_instance]" => "[@source][instance]" }
      add_field => { "[@source][name]" => "%{[@source][component]}/%{[@source][instance]}" }
      convert => { "[@source][instance]" => "integer" }

      rename => { "[message_type]" => "[@source][message_type]" }
      rename => { "[origin]" => "[@source][origin]" }

      rename => { "[msg]" => "[@message]" }
    }

# Replace the unicode newline character \u2028 with \n, which Kibana will display as a new line.  Seems that passing a string with an actual newline in it is the only way to make gsub work
    mutate {
      gsub => [ "[@message]", '\u2028', "
"]
    }

    if ('RTR' in [@source][component]) {
      grok {

#cf-release > v222 - includes x_forwarded_proto
      match => { '@message' => '%{HOSTNAME:[RTR][hostname]} - \[(?<time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:[RTR][verb]} %{URIPATHPARAM:[RTR][path]} %{PROG:[RTR][http_spec]}\" %{BASE10NUM:[RTR][status]:int} %{BASE10NUM:[RTR][request_bytes_received]:int} %{BASE10NUM:[RTR][body_bytes_sent]:int} \"%{GREEDYDATA:[RTR][referer]}\" \"%{GREEDYDATA:[RTR][http_user_agent]}\" %{HOSTPORT} x_forwarded_for:\"%{GREEDYDATA:[RTR][x_forwarded_for]}\" x_forwarded_proto:\"%{GREEDYDATA:[RTR][x_forwarded_proto]}\" vcap_request_id:%{NOTSPACE:[RTR][vcap_request_id]} response_time:%{NUMBER:[RTR][response_time_sec]:float} app_id:%{NOTSPACE}%{GREEDYDATA}' }

#cf-release > v205 - includes RequestBytesReceived
      match => { '@message' => '%{HOSTNAME:[RTR][hostname]} - \[(?<time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:[RTR][verb]} %{URIPATHPARAM:[RTR][path]} %{PROG:[RTR][http_spec]}\" %{BASE10NUM:[RTR][status]:int} %{BASE10NUM:[RTR][request_bytes_received]:int} %{BASE10NUM:[RTR][body_bytes_sent]:int} \"%{GREEDYDATA:[RTR][referer]}\" \"%{GREEDYDATA:[RTR][http_user_agent]}\" %{HOSTPORT} x_forwarded_for:\"%{GREEDYDATA:[RTR][x_forwarded_for]}\" vcap_request_id:%{NOTSPACE:[RTR][vcap_request_id]} response_time:%{NUMBER:[RTR][response_time_sec]:float} app_id:%{NOTSPACE}%{GREEDYDATA}' }

#cf-release <= v205
      match => { '@message' => '%{HOSTNAME:[RTR][hostname]} - \[(?<time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:[RTR][verb]} %{URIPATHPARAM:[RTR][path]} %{PROG:[RTR][http_spec]}\" %{BASE10NUM:[RTR][status]:int} %{BASE10NUM:[RTR][body_bytes_sent]:int} \"%{GREEDYDATA:[RTR][referer]}\" \"%{GREEDYDATA:[RTR][http_user_agent]}\" %{HOSTPORT} x_forwarded_for:\"%{GREEDYDATA:[RTR][x_forwarded_for]}\" vcap_request_id:%{NOTSPACE:[RTR][vcap_request_id]} response_time:%{NUMBER:[RTR][response_time_sec]:float} app_id:%{NOTSPACE}%{GREEDYDATA}' }
        overwrite => [ "time" ]
        tag_on_failure => [ 'fail/firehose/RTR' ]
        add_tag => "RTR"
      }

      if !("fail/firehose/RTR" in [tags]) {
        date {
          match => [ "time", "dd/MM/y:HH:mm:ss Z" ]
        }

        # set @level based on HTTP status
        if [RTR][status] >= 400 {
          mutate {
            replace => { "[@level]" => "ERROR" }
          }
        }

        if [RTR][x_forwarded_for] {
          mutate {
            gsub => ["[RTR][x_forwarded_for]","[\s\\"]",""] # remove quotes and whitespace
            split => ["[RTR][x_forwarded_for]", ","] # format is client, proxy1, proxy2 ...
          }

          ruby {
            code => "event['RTR']['response_time_ms'] = (event['RTR']['response_time_sec']*1000).to_int"
            remove_field => "response_time_sec"
          }

          mutate {
            add_field => ["[RTR][remote_addr]", "%{[RTR][x_forwarded_for][0]}"]
          }

          if ([RTR][remote_addr] =~ /([0-9]{1,3}\.){3}[0-9]{1,3}/) {
            geoip {
              source => "[RTR][remote_addr]"
            }
          }
        }
      }
    }

# Cleanup unused fields
    mutate {
      remove_field => "time"
      remove_field => "timestamp"
      remove_field => "received_from"
      remove_field => "received_at"
      remove_field => "syslog_severity_code"
      remove_field => "syslog_facility_code"
      remove_field => "syslog_facility"
      remove_field => "syslog_severity"
      remove_field => "syslog_pri"
      remove_field => "syslog_program"
      remove_field => "syslog_pid"
      remove_field => "syslog_hostname"
      remove_field => "syslog_timestamp"
    }

    mutate {
      replace => { "[@metadata][index]" => "app" }
      replace => { "[@type]" => "%{[event_type]}" }
      remove_field => "[event_type]"
      add_tag => [ 'firehose' ]
    }
  }
}
