##------------------------------
## Parses LogMessage APP events.|
##------------------------------

if [@type] == "LogMessage" and [@source][type] =~ /APP(|\/.*)$/ {

    mutate {
      add_tag => [ "logmessage-app" ]
    }

    mutate {
      # Firehose sets values like "APP/PROC/WEB". Rename just to "APP" for simplicity.
      replace => { "[@source][type]" => "APP" }
    }

    # Parse application logs based on msg format.
    # Marks unknown format with [unknown_msg_format] tag.

    ## ---- Format 1: JSON
    if [@message] =~ /^\s*{".*}\s*$/ { # if it looks like JSON

        json {
          source => "@message"
          target => "app"
        }

        if !("_jsonparsefailure" in [tags]) {

            mutate {
              rename => { "[app][message]" => "@message" } # @message
            }
            # concat message and exception
            if [app][exception] {
              mutate {
                ## NOTE: keep line break and new line spacing (new line is inserted in logstash in such a way)
                replace => { "@message" => "%{@message}
%{[app][exception]}" }
                remove_field => [ "[app][exception]" ]
              }
            }

            mutate {
              rename => { "[app][level]" => "@level" } # @level
            }

        } else {

            mutate {
              add_tag => [ "unknown_msg_format" ]
              remove_tag => ["_jsonparsefailure"]
            }
        }

    ## ---- Format 2: "[CONTAINER] .." (Tomcat logs)
    } else if [@message] =~ /^\s*\[CONTAINER\]/ {

        # Tomcat specific parsing (in accordance with https://github.com/cloudfoundry/java-buildpack-support/blob/master/tomcat-logging-support/src/main/java/com/gopivotal/cloudfoundry/tomcat/logging/CloudFoundryFormatter.java)
        grok {
          match => [ "@message", "(?<app_logger>\[CONTAINER\]%{SPACE}%{NOTSPACE})%{SPACE}%{LOGLEVEL:@level}%{SPACE}%{GREEDYDATA:@message}" ]
          overwrite => [ "@message", "@level" ]
          tag_on_failure => [ "unknown_msg_format" ]
        }
        mutate {
          rename => { "app_logger" => "[app][logger]" }
        }

    } else {

        ## ---- Format 3: Logback status logs
        grok {
          match => [ "@message", "%{TIME} \|\-%{LOGLEVEL:@level} in %{NOTSPACE:[app][logger]} - %{GREEDYDATA:@message}" ]
          overwrite => [ "@message", "@level" ]

          ## ---- Unknown Format: if no formats succeeded set with 'unknown_msg_format' tag
          tag_on_failure => [ "unknown_msg_format" ]
        }
    }

}
