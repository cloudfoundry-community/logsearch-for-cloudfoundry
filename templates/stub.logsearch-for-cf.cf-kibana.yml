releases:
- (( merge ))
- name: logsearch-for-cloudfoundry
  version: latest

jobs:
- name: ingestor
  templates:
  - (( merge ))
  - {name: ingestor_cloudfoundry-firehose, release: logsearch-for-cloudfoundry}

- name: parser
  templates:
  - (( merge ))
  - {name: parser-config-lfc, release: logsearch-for-cloudfoundry}
  properties:
    logstash_parser:
      debug: false
      elasticsearch:
        index: "logs-%{[@metadata][index]}-%{+YYYY.MM.dd}"
        index_type: "%{@type}"
      filters:
      - logsearch-for-cf: /var/vcap/packages/logsearch-config-logstash-filters/logstash-filters-default.conf
      deployment_dictionary: /var/vcap/jobs/parser-config-lfc/config/deployment_lookup.yml
      deployment_name:
        cf: my_cf
        diego: my_cf-diego

- name: maintenance
  templates:
  - (( merge ))
  - {name: elasticsearch-config-lfc, release: logsearch-for-cloudfoundry}
  properties:
    elasticsearch_config:
      templates:
      - index_template: /var/vcap/packages/logsearch-config-es-mappings/logs-template.json

- name: cf-kibana
  templates:
  - { release: logsearch-for-cloudfoundry, name: cf-kibana }
  lifecycle: errand
  instances: 1
  resource_pool: errand
  networks:
  - name: default

- name: smoke-tests
  templates:
  - (( replace ))
  - { release: logsearch-for-cloudfoundry, name: smoke-tests }
  lifecycle: errand
  instances: 1
  release: logsearch-for-cloudfoundry
  resource_pool: errand
  networks:
  - name: default

- name: upload-kibana-objects
  lifecycle: errand
  release: logsearch-for-cloudfoundry
  instances: 1
  templates:
  - {name: upload-kibana-objects, release: logsearch-for-cloudfoundry}
  networks:
  - name: default
  resource_pool: errand
  properties:
    elasticsearch:
      host: (( grab jobs.elasticsearch_master.networks.default.static_ips.[0] ))
      port: 9200
    kibana_objects:
      upload_data_files:
        - /var/vcap/packages/logsearch-config-kibana-objects/kibana-objects-bulk-json

properties:
  cloudfoundry:
    api_endpoint: https://api.my_sys.cf.example
    doppler_endpoint: wss://doppler.my_sys.cf.example
    firehose_user: my_admin_user  # CF UAA username of user with 'doppler.firehose' permissions
    firehose_password: my_admin_password  # CF UAA password of user with 'doppler.firehose' permissions
    skip_ssl_validation: true
  cf-kibana:
    # oauth2_use_existing_client: false  # Default value. Set true to use existing UAA oauth2 client for Kibana. Note the client required scopes: `openid,oauth.approvals,scim.userids,cloud_controller.read`.
    # oauth2_client_id: kibana_oauth2_client # Default value. Set id of existing oauth2 client if you have one.
    oauth2_client_secret: my_password_for_oauth2_client_id  # Password to be used for the UAA Kibana oauth2 client
    cloudfoundry:
      apps_domain: my_apps.example.com  # The CF apps domain ( eg: apps.10.244.0.34.xip.io )
      system_domain: my_sys.cf.example
      uaa_admin_client_id: my_uaa_admin_client_id  # The UAA admin client id (required scope is `uaa.admin`). The admin client is used to manage the UAA Kibana oauth2 client.
      uaa_admin_client_secret: my_uaa_admin_client_secret  # The UAA admin client's secret
      api_security_group: my_cf_api_security_group  # CF security group with API access
    elasticsearch:
      host: (( grab jobs.elasticsearch_master.networks.default.static_ips.[0] ))
  syslog:
    host: (( grab jobs.ingestor.networks.[0].static_ips.[0] ))
    port: 5514
  smoke_tests:
    api: (( grab properties.cloudfoundry.api_endpoint ))
    apps_domain: (( grab properties.cf-kibana.cloudfoundry.apps_domain ))
    admin_user: (( grab properties.cloudfoundry.firehose_user ))
    admin_password: (( grab properties.cloudfoundry.firehose_password ))
    elasticsearch_master:
      host: (( grab jobs.elasticsearch_master.networks.default.static_ips.[0] ))
      port: 9200
